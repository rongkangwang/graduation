%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 321.000000 264.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 321 264
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 321 264
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: PingFangSC-Regular
%!FontType1-1.0: AAAAAJ+PingFangHK-Regular 001.003%%CreationDate: 3/7/19% Copyright 2019 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAJ+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /gid1601 putdup 2 /gid1674 putdup 3 /gid2678 putdup 4 /gid6224 putdup 5 /gid6924 putdup 6 /gid7500 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA66220E183507C2670BFFEE9B10FE56DD319F768A004B17A59025002D9D95F7E82180B7E78244889EE81177017741CF63E954EC0AAC8B981AE8B7CAFDB1C89BFFACDD7B4760D511955E607224AE5C7497A50516F5CB3C44C122FA3DEC4957BD9772896F11B9096094C0E0F5A1ADE05EC733F0FFB6733523B32D2117E78507174F5EE6F901F16A492A165AA04302BE8DEF783BB93956553CBFF53828CB61F3DEDE3BDD8DF78CD4EF0496A6CD5436828FEBA79653811223D067445742F2AE2276195F1C8AB1643E4DBBAFEF7FE3BBEC4611A4C3A104E61FE357261C9AD859AA755F1CD6D315F3C7A325CDACAE8C613ACCF6020A39DB29E2257941352DD121EBE67DD0C686ED57EDE05A540F05EE9C8E2EFB4C949437CDEC49D1A5402C65C626E71A1C496F5626F7CC5F0DDF437F725096DEC84C57C46320853E92B007613DBBA7281FE48EB06693AD3828B3C7CDD1819633D7EDB690B243D45D3C7DA4A35944969E4F2751C63DF0C822720CC55901B0C62CB3A3D3BE79482A10162510156F152C7221FED93AABC8FB000AD85CCEFBDE0F7712B8A44849ACF5ED719A988E1A8B36E6D6DC99F2838D294B67DCE0D5C7BD4ABED1B31D92642F774CAB30972C861582B83388848C433889E30363F084B46464310CB66EC045319CCFCDCF8C75B97921BC3B904E505DEB1590504DB16A87E94AAE675BF9E906EE15EB11715E7950D2A4E1D52AC1BBD85BAE0A0A1684C140BE666F93C048F88EA52BC087DFC81BFAB2136D83E8876C43F49C88A29C9E4AD85825AE1DB1E0A2D5E67B971C1106AFE91D51669F75681A66B09D05A75E417FD5CCB830C53BE4A0FD270FDAEC32142A29568A7C2B2F5D757ACDA9B1079C36495021CEF09DED573A752D88F6919B0E8A74A6B05BB5A03C1395F7FAA535139D344AE0D4F0F74375306C91192644E24F9A40954FB0532054C19A459CCAB62433410C20C4DADB120294BD0AB3672C0FFAE09F132736397C43C5191EEBB964872AB505E3384BBB299401A5AEF1BA54BE3DBF4935152E56AA6AF3B4A66ABE47367A90CE481EC6C7A5E3378EB5393E65E53016FEA14279C15B5D64411180A34B74F1A8AD1FC5AE36C50859DBEF1F4B8E5977FC7421EEB42E9E35200A308B5FFFE312B4597882936ADB3175557C1ABB2A4A1D8CBC0CDCA6B0CCFE644A63A956511BD57300A6841D32E7AB31EFF99DACD2081B03185F9A59D2CE89DF5E020B27F5307ED407EA3E49CF2008A558293527C069FF37CC6C497DEF285F8941B99AED621283F2E99073E1D36585C0CFE1FB9FEEE486FB5A7172836055F47F123DC7C148EBE1914DBE2610DFD31E707DFCF78A42BB80E5E2FFA3183964F8CA1B5AC3B4EA342431F40DD3A93EE94B6A23D3B152CF711D376A96D3192475A0FC3017D0B442C2EEEF0DC2139204ABB5927BA4E5FC7A09CF42D0122B16E101D35A8E38FDAE915F1602BF7957C1EC4B4CB568DAAB9FCC31DA53EC01EF82C5B7534D6233FC29A2ECC8EA64F76ECF5E3DEF7E141F8BA8968CA09082BF0F2B0A1FCD5A7BD16B5444C3033C5B85CB3DF18B3DA931E9C5EDF01538C22B0D46F39BC7F004C2DC5919CF5BDBBB608BB51EB3A662E4C7182D4247FE843EE688AF014BDA6C497C987C0D92039FBCE750E7DCE2C600580247D77762A1512E28CC2819E0D7494DE528FE5C8D31ADCFA7CD5BB810968ED1374EE8578C4C647B3982B33B393B878AD4012771434A10298CAE0ECFDA163B0E29F127B87965EBBC9A465D1607AD8DF794A7DAF155B0354D7546167F5979204B31334BC750F88CAEDE2E65943C7D8949D67B7C36BC398A0E096945F9B61D0ECA3AD935201DC541E8CE24A3C2B3B4B14DFEEDAD0811D367752F34F4C8B8CBC5F34847EA90F086278EBE7A7D58C5ADDEAE9B172AB56F85E4AAED398C3DA9A8146EEA351580260A5A6B19C1404D4564CB04C03499D9EE2FA414B8F3B13F264F0BD607E891D95B1D9456D452B77D72CF354D4FC19219D317B9B62A200FE126CA8650666131D2D9EDA070833FA3B427342A332AF16DC9C288AC16B5262716F74C6A5D975DA9241172014D3839B850BDCDA4805648CD4045C6067DF0D636451D3B78255B64B3C92A15A18C8D8E8984F29586ACA50A8C2977A7F1C5816D74ABD6C323BC1D0030665CF9E388737B31002E0B504A8696F71024AAC17A45945F9BD6DAA880F987F65482CB39C45931B4178BF93B5BEE9525F05F5E439A9114A191B759B6F9F56C3EED57F6387F13D24C1813B3EEBBEBB65283737D8E0822DBB67C5FA32364EAB4AF2A3406DD01AF785312CFB3A08600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /gid6924 putdup 34 /gid1601 putdup 35 /gid2678 putdup 36 /gid7500 putdup 37 /gid6224 putdup 38 /gid1674 putreadonly def/$SubFontArray [/AAAAAJ+PingFangHK-Regular findfont ] def/CharProcs 8 dictdup /gid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /gid1601 {(\001) 0 $SP} putdup /gid1674 {(\002) 0 $SP} putdup /gid2678 {(\003) 0 $SP} putdup /gid6224 {(\004) 0 $SP} putdup /gid6924 {(\005) 0 $SP} putdup /gid7500 {(\006) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/PingFangSC-Regular cguidfix
/F1.1/PingFangSC-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
[
1
4
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 321 264 rc
1 0 0 -1 40 393 cm
100 163 m
141 163 l
141 373 l
100 373 l
h
100 163 m
S
0 i
1 1 1 sc
CM
170.25304 217.25304 m
175.91566 211.59044 175.91566 202.40956 170.25304 196.74696 c
164.59044 191.08434 155.40956 191.08434 149.74696 196.74696 c
144.08434 202.40956 144.08434 211.59044 149.74696 217.25304 c
155.40956 222.91566 164.59044 222.91566 170.25304 217.25304 c
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 40 393 cm
130.25304 175.74696 m
135.91566 181.40956 135.91566 190.59044 130.25304 196.25304 c
124.59044 201.91566 115.40956 201.91566 109.74696 196.25304 c
104.08434 190.59044 104.08434 181.40956 109.74696 175.74696 c
115.40956 170.08434 124.59044 170.08434 130.25304 175.74696 c
S
0 i
1 1 1 sc
CM
170.25304 162.25304 m
175.91566 156.59044 175.91566 147.40956 170.25304 141.74696 c
164.59044 136.08434 155.40956 136.08434 149.74696 141.74696 c
144.08434 147.40956 144.08434 156.59044 149.74696 162.25304 c
155.40956 167.91566 164.59044 167.91566 170.25304 162.25304 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 40 393 cm
130.25304 230.74696 m
135.91566 236.40956 135.91566 245.59044 130.25304 251.25304 c
124.59044 256.91565 115.40956 256.91565 109.74696 251.25304 c
104.08434 245.59044 104.08434 236.40956 109.74696 230.74696 c
115.40956 225.08434 124.59044 225.08434 130.25304 230.74696 c
S
0 i
1 1 1 sc
CM
170.25304 107.25304 m
175.91566 101.59044 175.91566 92.409561 170.25304 86.746964 c
164.59044 81.084335 155.40956 81.084335 149.74696 86.746964 c
144.08434 92.409561 144.08434 101.59044 149.74696 107.25304 c
155.40956 112.91566 164.59044 112.91566 170.25304 107.25304 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 40 393 cm
130.25304 285.74695 m
135.91566 291.40955 135.91566 300.59045 130.25304 306.25305 c
124.59044 311.91565 115.40956 311.91565 109.74696 306.25305 c
104.08434 300.59045 104.08434 291.40955 109.74696 285.74695 c
115.40956 280.08435 124.59044 280.08435 130.25304 285.74695 c
S
0 i
1 1 1 sc
CM
170.25304 52.253036 m
175.91566 46.590439 175.91566 37.409561 170.25304 31.746964 c
164.59044 26.084335 155.40956 26.084335 149.74696 31.746964 c
144.08434 37.409561 144.08434 46.590439 149.74696 52.253036 c
155.40956 57.915665 164.59044 57.915665 170.25304 52.253036 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 40 393 cm
130.25304 340.74695 m
135.91566 346.40955 135.91566 355.59045 130.25304 361.25305 c
124.59044 366.91565 115.40956 366.91565 109.74696 361.25305 c
104.08434 355.59045 104.08434 346.40955 109.74696 340.74695 c
115.40956 335.08435 124.59044 335.08435 130.25304 340.74695 c
S
0 i
1 1 1 sc
CM
27.253036 194.75304 m
32.915665 189.09044 32.915665 179.90956 27.253036 174.24696 c
21.590439 168.58434 12.409561 168.58434 6.746963 174.24696 c
1.084336 179.90956 1.084336 189.09044 6.746963 194.75304 c
12.409561 200.41566 21.590439 200.41566 27.253036 194.75304 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 40 393 cm
-12.746963 198.24696 m
-7.0843358 203.90956 -7.0843358 213.09044 -12.746963 218.75304 c
-18.409561 224.41566 -27.590439 224.41566 -33.253036 218.75304 c
-38.915665 213.09044 -38.915665 203.90956 -33.253036 198.24696 c
-27.590439 192.58434 -18.409561 192.58434 -12.746963 198.24696 c
S
0 i
1 1 1 sc
CM
27.253036 134.75304 m
32.915665 129.09044 32.915665 119.90956 27.253036 114.24696 c
21.590439 108.58434 12.409561 108.58434 6.746963 114.24696 c
1.084336 119.90956 1.084336 129.09044 6.746963 134.75304 c
12.409561 140.41566 21.590439 140.41566 27.253036 134.75304 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 40 393 cm
-12.746963 258.24695 m
-7.0843358 263.90955 -7.0843358 273.09045 -12.746963 278.75305 c
-18.409561 284.41565 -27.590439 284.41565 -33.253036 278.75305 c
-38.915665 273.09045 -38.915665 263.90955 -33.253036 258.24695 c
-27.590439 252.58434 -18.409561 252.58434 -12.746963 258.24695 c
S
0 i
1 1 1 sc
CM
27.253036 74.753036 m
32.915665 69.090439 32.915665 59.909561 27.253036 54.246964 c
21.590439 48.584335 12.409561 48.584335 6.746963 54.246964 c
1.084336 59.909561 1.084336 69.090439 6.746963 74.753036 c
12.409561 80.415665 21.590439 80.415665 27.253036 74.753036 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 40 393 cm
-12.746963 318.24695 m
-7.0843358 323.90955 -7.0843358 333.09045 -12.746963 338.75305 c
-18.409561 344.41565 -27.590439 344.41565 -33.253036 338.75305 c
-38.915665 333.09045 -38.915665 323.90955 -33.253036 318.24695 c
-27.590439 312.58435 -18.409561 312.58435 -12.746963 318.24695 c
S
0 i
1 1 1 sc
CM
314.25305 162.75304 m
319.91565 157.09044 319.91565 147.90956 314.25305 142.24696 c
308.59045 136.58434 299.40955 136.58434 293.74695 142.24696 c
288.08435 147.90956 288.08435 157.09044 293.74695 162.75304 c
299.40955 168.41566 308.59045 168.41566 314.25305 162.75304 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 40 393 cm
274.25305 230.24696 m
279.91565 235.90956 279.91565 245.09044 274.25305 250.75304 c
268.59045 256.41565 259.40955 256.41565 253.74696 250.75304 c
248.08434 245.09044 248.08434 235.90956 253.74696 230.24696 c
259.40955 224.58434 268.59045 224.58434 274.25305 230.24696 c
S
0 i
1 1 1 sc
CM
314.25305 107.75304 m
319.91565 102.09044 319.91565 92.909561 314.25305 87.246964 c
308.59045 81.584335 299.40955 81.584335 293.74695 87.246964 c
288.08435 92.909561 288.08435 102.09044 293.74695 107.75304 c
299.40955 113.41566 308.59045 113.41566 314.25305 107.75304 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 40 393 cm
274.25305 285.24695 m
279.91565 290.90955 279.91565 300.09045 274.25305 305.75305 c
268.59045 311.41565 259.40955 311.41565 253.74696 305.75305 c
248.08434 300.09045 248.08434 290.90955 253.74696 285.24695 c
259.40955 279.58435 268.59045 279.58435 274.25305 285.24695 c
S
-8.6752157 206.24609 m
95.895531 189.79266 l
S
0 J
0 j
0 i
103.79831 188.54922 m
95.895531 189.79266 l
95.429237 186.82912 m
103.79831 188.54922 l
96.361824 192.7562 l
S
1 J
1 j
0.60000002 i
-8.8587275 211.71393 m
96.20491 235.59203 l
S
0 J
0 j
0 i
104.00597 237.36499 m
96.20491 235.59203 l
96.869774 232.66663 m
104.00597 237.36499 l
95.540047 238.51743 l
S
1 J
1 j
0.60000002 i
-8.75949 271.23856 m
96.037628 291.39185 l
S
0 J
0 j
0 i
103.89368 292.90262 m
96.037628 291.39185 l
96.604172 288.44583 m
103.89368 292.90262 l
95.471085 294.33786 l
S
1 J
1 j
0.60000002 i
-10.62886 216.06975 m
99.184288 283.26312 l
S
0 J
0 j
0 i
106.00819 287.43857 m
99.184288 283.26312 l
100.75009 280.70416 m
106.00819 287.43857 l
97.618492 285.82208 l
S
1 J
1 j
0.60000002 i
-12.729022 218.73506 m
102.71642 333.77686 l
S
0 J
0 j
0 i
108.38317 339.4238 m
102.71642 333.77686 l
104.83401 331.65182 m
108.38317 339.4238 l
100.59882 335.90189 l
S
1 J
1 j
0.60000002 i
-10.437197 261.25223 m
98.861961 198.19502 l
S
0 J
0 j
0 i
105.79144 194.19725 m
98.861961 198.19502 l
97.362793 195.59647 m
105.79144 194.19725 l
100.36113 200.79358 l
S
1 J
1 j
0.60000002 i
-8.75949 265.76144 m
96.037628 245.60815 l
S
0 J
0 j
0 i
103.89368 244.09737 m
96.037628 245.60815 l
95.471085 242.66212 m
103.89368 244.09737 l
96.604172 248.55417 l
S
1 J
1 j
0.60000002 i
-10.437197 275.74777 m
98.861961 338.80496 l
S
0 J
0 j
0 i
105.79144 342.80276 m
98.861961 338.80496 l
100.36113 336.20642 m
105.79144 342.80276 l
97.362793 341.40353 l
S
1 J
1 j
0.60000002 i
-12.729022 318.26492 m
102.71642 203.22314 l
S
0 J
0 j
0 i
108.38317 197.57622 m
102.71642 203.22314 l
100.59882 201.09811 m
108.38317 197.57622 l
104.83401 205.34819 l
S
1 J
1 j
0.60000002 i
-10.62886 320.93024 m
99.184288 253.73689 l
S
0 J
0 j
0 i
106.00819 249.56143 m
99.184288 253.73689 l
97.618492 251.17792 m
106.00819 249.56143 l
100.75009 256.29584 l
S
1 J
1 j
0.60000002 i
-8.8587275 325.28607 m
96.20491 301.40799 l
S
0 J
0 j
0 i
104.00597 299.63501 m
96.20491 301.40799 l
95.540047 298.48257 m
104.00597 299.63501 l
96.869774 304.33337 l
S
1 J
1 j
0.60000002 i
-8.6752157 330.75391 m
95.895531 347.20734 l
S
0 J
0 j
0 i
103.79831 348.45078 m
95.895531 347.20734 l
96.361824 344.2438 m
103.79831 348.45078 l
95.429237 350.17087 l
S
1 J
1 j
0.60000002 i
133.56458 191.13382 m
241.17638 231.86189 l
S
0 J
0 j
0 i
248.65845 234.69365 m
241.17638 231.86189 l
242.2383 229.05612 m
248.65845 234.69365 l
240.11447 234.66766 l
S
1 J
1 j
0.60000002 i
133.56458 246.13382 m
241.17638 286.86191 l
S
0 J
0 j
0 i
248.65845 289.69363 m
241.17638 286.86191 l
242.2383 284.05612 m
248.65845 289.69363 l
240.11447 289.66766 l
S
1 J
1 j
0.60000002 i
131.5434 194.77779 m
244.57619 280.7298 l
S
0 J
0 j
0 i
250.9442 285.57214 m
244.57619 280.7298 l
246.39206 278.3418 m
250.9442 285.57214 l
242.7603 283.11783 l
S
1 J
1 j
0.60000002 i
134.49992 240.94965 m
239.60014 240.58472 l
S
0 J
0 j
0 i
247.6001 240.55695 m
239.60014 240.58472 l
239.58972 237.58475 m
247.6001 240.55695 l
239.61055 243.5847 l
S
1 J
1 j
0.60000002 i
134.49992 295.94965 m
239.60014 295.58472 l
S
0 J
0 j
0 i
247.6001 295.55695 m
239.60014 295.58472 l
239.58972 292.58475 m
247.6001 295.55695 l
239.61055 298.58472 l
S
1 J
1 j
0.60000002 i
133.53325 290.78406 m
241.22911 249.27628 l
S
0 J
0 j
0 i
248.69386 246.39925 m
241.22911 249.27628 l
240.15021 246.47701 m
248.69386 246.39925 l
242.308 252.07556 l
S
1 J
1 j
0.60000002 i
131.50471 342.17172 m
244.6412 255.35518 l
S
0 J
0 j
0 i
250.98793 250.48495 m
244.6412 255.35518 l
242.81488 252.97516 m
250.98793 250.48495 l
246.46754 257.7352 l
S
1 J
1 j
0.60000002 i
133.53325 345.78406 m
241.22911 304.27628 l
S
0 J
0 j
0 i
248.69386 301.39923 m
241.22911 304.27628 l
240.15021 301.47699 m
248.69386 301.39923 l
242.308 307.07556 l
S
/Cs2 SC
0 sc
1 0 0 -1 17 44 cm
/F1.1[ 8 0 0 -8 0 0]sf
-12 2.5 m
(!"#)[ 8.000000 8.000000 0.000000 ] xS
1 0 0 -1 160 11 cm
-12 2.5 m
($%#)[ 8.000000 8.000000 0.000000 ] xS
1 0 0 -1 304 77.5 cm
-12 2.5 m
(!&#)[ 8.000000 8.000000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
167.47672 230.40091 m
170.03242 230.39597 l
169.1698 231.51993 l
169.1698 231.51993 l
175.47488 236.35895 176.66336 245.39304 171.82434 251.69812 c
166.98532 258.0032 157.95123 259.19168 151.64616 254.35265 c
145.34108 249.51363 144.1526 240.47955 148.99162 234.17447 c
150.14195 232.67561 151.57617 231.41797 153.21245 230.47327 c
153.21245 230.47327 l
153.21245 230.47327 l
146.3293 234.44725 143.97096 243.24869 147.94496 250.13184 c
151.91895 257.01495 160.72038 259.37329 167.60352 255.39932 c
174.48666 251.42532 176.845 242.62389 172.871 235.74075 c
171.92632 234.10449 170.66866 232.67026 169.1698 231.51993 c
168.30719 232.64388 l
167.47672 230.40091 l
h
167.47672 230.40091 m
f
1.4 w
0.60000002 i
0 0 0 sc
1 0 0 -1 40 393 cm
127.47672 162.59909 m
130.03242 162.60403 l
129.1698 161.48007 l
129.1698 161.48007 l
135.47488 156.64105 136.66336 147.60696 131.82434 141.30188 c
126.98532 134.99681 117.95124 133.80833 111.64616 138.64735 c
105.34108 143.48637 104.1526 152.52045 108.99162 158.82553 c
110.14195 160.32439 111.57618 161.58203 113.21244 162.52673 c
113.21244 162.52673 l
113.21244 162.52673 l
106.3293 158.55275 103.97097 149.75131 107.94495 142.86816 c
111.91895 135.98503 120.72038 133.62669 127.60352 137.60068 c
134.48666 141.57468 136.845 150.37611 132.871 157.25925 c
131.92632 158.89551 130.66866 160.32974 129.1698 161.48007 c
128.30719 160.35612 l
127.47672 162.59909 l
h
127.47672 162.59909 m
S
17 0 0 16 127 233 cm
BI
/Width 51
/Height 48
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
JcFs6JcFs6JcFs6JcFs6o)J^Srnm_9rp'LNrpp'Vrp'CArn7;Gp&FpHroF(DrpKdVrpKdNroF(9rn6c?
rp'L?roF(DrpKdVrpKdHrn7;Lq#BpbhuNatq#C?NhuNc;p&G$jjoGD6q#Bpbrlb;YrdXJ=r\+8Mrk&1&
q#C?lrk&08r_2k_rau&>n,NC1reg7HrcA(ErqlKjl2U`cp]1:ei;`HMroE#;rqlQmr\+9Jn,MYPrh&rc
refY6o`5!ii;`fRrW)p/l2U#Jrg!6YrefY6r]^)WrnlZ6r`T4#rp&bJl2Uagp]1;Ci;`cfp]1<Nj8],>
rW)q0k5X]GroEhSrZL8$ri,PjroE,>rZM1?rqkjXl2UbDp]1:Hk5YGZnc8Z]k5YFmrW)qij8\BDroEhS
r\*F6rc@W1reft?rr2cpi;`'Arr)Kirr29arpKacrcA(2p]1;Yl2Ua?rW)rGi;`'Arr2Qjrr)3`r\+6N
rr)i>p]1;*m/R([rW)pNh>ca>rr)Kirr)<crmLcGrg!K_roEhSrZLS-r_3:krpJVBk5YDlp]1<an,N7b
qu?ZVp]1:Hn,NCErW)q=gAg=8r\+$Hrnm;Hrh'/irlb3=rp'7YrZL\0rXf&/rr(RNk5YE6p]1<Np&G$g
rW)pNq#C?mo`5!ip&G$'rW)qsfDk"5r]^)Wrn6uErau-0rp':Yrr2Qjrr)Wlrr2cpeGn\2rg!6YregLN
rpKacratj'rr)Kirr2]mrdXnIrn5g$k5YFGp]1;Nq#C=HrW)rpo)J\3p]1<Yqu?ZgrW)p]dJrA/regIN
rg!B\rlb9@rh&ZZr\+$HrnmVQr_3:krpnJ:k5YG6p]1:Wqu?Nnm/R&<p]1<Nrr;uTrW)qIcN!&,roEhS
rZM4?rh'/irmL05r_3(erlb<@rXf&/rr14Ck5YG<p]1:Hrr)frr\*O9rh&rcrh'25rW)r'bQ$`)rpKO]
rZM2CrW)rgl2UaJp]1;*q[gjKk5YG[nc8Z1k5YFGnc8[HaT(E&rr2Hgrr)!ZrnmAKr_1<2k5YG[o`4us
j8],>o`5!a`W+uur\+-KrXe#frnmJNrdVfbj8]*3qZ-WKi;`fLp]1<m_Z/ZrrZM1?r]]0<rr2cprk#rF
j8]+9rW)rmgAh-`r_1!)JcFs6JcFs6JcFs6JcFs6JcFs6JcFs6JcFs6JcFs6JcFs6JcFs6JcFs6JcFs6
JcFs6J,
~> %APLeod
EI
ep
end
