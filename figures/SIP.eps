%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 433.000000 313.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 433 313
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 433 313
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: PingFangSC-Regular
%!FontType1-1.0: AAAAAC+PingFangHK-Regular 001.003%%CreationDate: 2/27/19% Copyright 2019 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAC+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /gid3 putdup 2 /gid18 putdup 3 /gid19 putdup 4 /gid20 putdup 5 /gid21 putdup 6 /gid27 putdup 7 /gid36 putdup 8 /gid37 putdup 9 /gid38 putdup 10 /gid40 putdup 11 /gid42 putdup 12 /gid44 putdup 13 /gid46 putdup 14 /gid49 putdup 15 /gid50 putdup 16 /gid51 putdup 17 /gid53 putdup 18 /gid55 putdup 19 /gid57 putdup 20 /gid60 putdup 21 /gid1380 putdup 22 /gid1747 putdup 23 /gid2191 putdup 24 /gid3664 putdup 25 /gid4696 putdup 26 /gid5266 putdup 27 /gid5475 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA6CE8907ADDB044A0D44469293E6431077DC4F96365DB5E32FA0DEE7FA863F05EA4BFEEBDDDCE263120F00CB88471F30ACCCAD6D55C96DC4C68D0F3CD4538C04FE141681D4FA572707558B1997D3A0DEDBBB82C9E74F548DA5B396B4BC2D2E438AB3AA35E601C71E2428CAFD25222B4AFDD96AFE86AF4ABFFA32AF3DCD9A3BBAC2E985750C2AE2B9212A52D5D3CC7B63C57E028423120DBCCC1AF7704854910B8C2C72180E450F2726A77B5DF646F88C42FAA727F6CBC8A3966EC9451A80F0EBC9ED58367F07D3AC1F17F4600C6B2A58717D8EAECE0CC09EC240C824E06B6733EDD6BFF67757F866237A018F25599B6037ED972D21104BA320D2260480635A03E6593AD6A23F2120323B3F0CE9C8BD6C04563B741DF45E7810238F3B748E96D4BD03F73FD55277EF96C0F233D61F76028294F4F81A9BB1FEE37FCCEB7F23B2FDFD0CAE8A2553625350CC58A9267F999E1FCD5CBAE94CAACD9CE9B86D75215B833F09B8D408DAD0A227A16AC169BAD4D89C39B10EE1BDD6A474CEE7E1B7A43726ED6361F826A1CA513392686E59002B647B189438FA40B9C2D43DAFBC15F6FD18F8DE3F17FD7840B3ED7D69F42E2C9DF1F5E429B074ABF3651616384DD37363F0E906D75CA080213FA176AA0027E4437F27C90150C75B48829A70995454E08B3651FA7522E85519A4E4E892C0F585FDD913DA9DD2A7DF1AAE7DC1708AD5E9E47C4637653261B1EB6D25B458D522368C96E0AA530ECCC68CCA0F78328742F398F944710E0FC16658B5B7B59925357430371CD9C60EAAAD857D01C70590238359B54C14C189A6B7B321128DAC4E6D5DD3E0FE23CC541BD3C42A2A143545E66AFB7AB02E2C4E55AF1CFCA3C64B7E3D5C094B8C80F75BE809243196726DFDE95084C7417A1DEE23704627168C03F22F9EDB733E2FE9C294AFFFAF10C0234DAC717ED0DCEE24FFCE93F80BE5CC138D989637F53E618987EB4B132353628310E236E87801BBF3585CD6330C1FCE0017E35A83853F2D6BFA9F92649ED2367CF197E022C9183CB44323BFE579D3080D792FDF0F1DA9EB7F8702081CCE50B93CF33854579DE5DC1613A599136D9B53C16D00A7FF64F31505A2E7A20D9504B5CAE2EF2F7ED99AACC9238ECC406F2753E3A6CBF7C3851CBF388922B3AC7FDA85AF27161C5B8C17B66168FB575FDAEF780D78758739ADA27DC8E319B56C82BE80E99A08E4CFA1B806DD6B02188415FD24877A0B7E8E0996EFC80348F778EDD2F58FF08A18EC97DE77C85B60FF770201D41759C2C5DD3702A626558A0F1702169EAED1DAFDC529CBE3800A52E22DE1363F0E2445ADB7FC8BFB44EF735ECA4E61524EBF7EEA4D95F9F3DE13E29097E0B77D171BF2387ECF4E5C125F3B06508A7E5106F8B10F38C9B541B5F6A60BFA3989DA581ED6D30FD72061BE45EF4618BDA538DF74C0DFB38257B35BF5CB39F3B2B9B1EFC76C3A396A5D16B68355F6822B2DF613A51420B5EEA084123069D74156AFF213B7959A7E9D2D12C1BADB233579697FBFBAD13B48F4C64E8B42DA4DD1DC165DDEB577BA7C7F17370156719BEE52E65CD995B74A5D582E73D1ECF3F23E9C5EE2914BD567036D974A21AE85AC60D3D3B83374885D72A8E4DB921AB480C2937A955B9C9258DFC405F55D4B5649902BFF81C434C79A60A9E00688DB4ABDF8794929B68C0D546D04CA27272D76B882FC04A6556628B0649942352EC5A0026FD9483E4FEF3B45AB0E1A23C97FC2A96F51D524B221706D3F3D55C02399736D40C7BECBE1C6EBB3F265E4B3DC10707D50A8E182AEBDE0C74041F7F4F0BA21C8CC4DC171E75FBAE000C99C1A31E028D97B2D11428A275F2C938DA0FEA7A27CAE5EB538DBC8709BBC817CA98627742E5DFC7D6E7522FDCCD99D3F8169FE01EE5C684994DD48E60BF6B43365A95B0560C4032EC2EB39C67608BD062386F211AD2ADFE27B1DD758EC660A87CD5BBC158862BF4394E2CCF39394F2AF2AC36936E17415EABD1DD34C9471907B2492CB18A9F337A548C0E7207F81B7F8D847E045DD108482A2099B112C05C63D5DC306BD32E7AE4B194DF28F414C05824481AA782588A4B840B8FADA07C78B7636B7438833860CB5A330548DB6369A2826BB245D2085024A8C5AA2DB558758DEDA3ECCDD534203BB721E047DAB64EBA1EEFA3DDE990ADBBD87D1FD3799C50D2CC31B556DD6BE4A08F4306161BAA5272F2429221ECA3283DBB2DF0BFD80C352D24BF5B390B110C086242598204F54DC7AE73C7CDA0A98DA386A4F209107F08380437E408D50E58D2BB765D81832BF8CE19FBA8A05D89D4760007BACB3BBA9D58FAFD56CF0E3235345E708A944413645E2D53D97870FCA20D6937BE7986FD2A69C7FCF1A40CA5520839C61662ACDFD1090D01B7DA48D78A39675DD73A63F3C9414B4E290D239B88E0B2F3F3F02486A55C3362B68543B52C28D6E63DDC78C67D15AFE07D6EE2FCA7825AF486DC2FDCE66BA04C4AB63FCB2EBB62A782750FCD423E50DEB7C4A85CD55C581DC5BE08A925C884579AD1D63D89A0EFE8159140D61DFDE8FEF3C01AEED11B5A267669A7C0431DECAE257DC5BE625822BFBC51A2FF4508E1EF27BEDD470A59888953CD4B6449B0FD7801DD2B3848DD03BBBCE447B65E07A5794B1BFC8724A893E0E77E97BAACAF618AACC5C898F7ABEB08851358DE13B130F55D14BE367E345E0882B128FC94098F3710D1F8DBD1945FF213BC10B01949FA236D5D161BFFA1743BF8F54DF752BA2230A00FB33AF56D778CBD21222386CB408FDCCB8B341DAA00B1AC4C5FB9842BA532AEEBCD979355F20DE8D70E27E62FA9BD64B7F13C15206B00C684371EBCE536F6090F804796C1D347320FFA72311E9227D030BB9DA74CF3FBE2F5F58F1A993642CCC608C65B267532943C72529D338E22402AB0D7DCD3D8994A7DD79A0E164C54E9148975ACAF1EE1A92B0DDC67458D58409A5C90ABC30DB54F494249FA9F79BB3E70E401DB7CABD63E5D229BA7BD3A7704CB69CB43D7C9E738FCD0747D375195376A4883DF0BA01E8CEC7F4CC4F25C3AC57811C1629BC6EE77B069778F90351A9D41B6D1A43F68B30141D2358C0C3FC70FD2E85D5E5B0820688C88145EE94F55F8972DE7602E59706BBF299BAAABD6D63461C8A0BDD81F00E3F18E32DE6AEA1CFD0DFC9C86E037AAA58460DBB141A7AE592A348CAB2D2D0D9058E15C064D302840508BDFAD18F1354117F48A7F56F5D5CF0BC134706A2E568963636F9EA42E6C8B13E288DE8B3CA80D50D703E549F3601E707A822DE8D203203582061B11D6EE73D476C53A5BC3409A234449BB69D29DB02DBE794A55BCC33DB56794D65BBEF4069CCD60DCAC757197A682DDE3FC8002A00F40A51BCDB39CC8873385CD690D714452D9A66F4E33AC516E49E9A1CCC03E4F9B956DF79E1C2AFDC34BADDFC1CD313756F90502A6FAEA8C76F466B82E0DDD8F37DB707FECFFBF5E52FB09C4B10E129BE20B0ED8DBC348F8468D9AC261DAC5B3AFE0248D2374E3418494BFB026FB874C1CC02F175A94AD43BE15D4379D1C51541AE0C51E58C59AEE743CBFD27F5535AC446D58259EA9C39ACD0996D68BAC903AD415CAB1F657785A28CF6F0AD0F879E8F7776997E21D36B9AD710783257925371CA360D392B0953039D2DC64361056A0A5CD2B33B0A5BEDDA09853902430B4634BADEBFFFD7EA5A27692D773F4EB9DE8D3BEC5346A1BDCBC5309BE679DAC9941BE9505643746B64C10E40F759814646B15918B094312F2CB000A0D128B23AD3AA431F16C2C96CFD05102D9C8B03624567D67BC37475C3EB119EFC286C0F9AF5CFD9E42A3DD6FBFBC2952DE9AE37271F1A36CE642851E4DC316E2F5CD8E9562A7E10D9C7EE37DE406608594BFF051FB4E31DAAD0607055A36C9C0442DFA66A378434DE612D66C15A083A98E73EFB1AC6949C1F6CC3C26A2EFAFB5EBD85B201AFD4097A1DF538E4F31E6A2D1B93CA76377CDD8DB4C3FDFFDD14262CD892FBDA760DD49A7388ED835BBF51D3D85151CD33B841818401B0E5610B0073C9971A41D9DA3AA1ED2F2EDACB3E57FB59FFD7FDEC421575277177F62CD93E797EDA09080755955F41933D40C53E001261ADAC9E76EA2668CD7790C517263D837D6F0B0DEFD25D0FCE1991B80C6C143608BEA8030CD1563B4734750C2CB1AC6472BE9F659E8E11E43E2DAE2E284A0DBEFEDF3BD55460ED7C6FE1D5480352414CE049C4E8D883AA329E44CD2E4E476D251187A35717E93FDB778348AC36198EF2AB4F2806AAB614A30FF42336EB84AC8DE589AD923CE1DF850692EFCBD635A512FB20D073029FF4CB9A31F518F83BA2C3F3D12F3C453D5A0A2160268FF341F86178571130AAE97294E44E9943E8AC31E9EFAC349BEAEEB8055A48EEF6F1B3B4FA1BB6433C06888138AEC669379F4114CFAFF4FC80B0C59449BABCCD3DE23FD80DE0BCD8EB1F10478A0C4F29E0901EA7B83C3D8565D60A8DC24587DAADB0A0A6287448D9CD0AE7026CF9E5AF2D8A0B490EFDB02619A0C489A9E0939D55AA5E4265FE90E69A40BCB097F20E41FAC664000A4635AD134AE49528EA114CD109A96FFA83981DC35209699498502AD545CB68BA6E46B7BB4EECA415E7B45700E306865BD35DD4E3A903296821113542AAC58AF9D0FBBC573E3E16543D3A3A4DB9BCDC553E13A2D403B69E38B3730E6A6BA03406B253E2FE462D7B3C2E5EBBE09B821359B209221EC03A90E384640D7A6C98B69E6CD16D46B1032CFB3445A733F53ECAD592CF9722506C284AB42D76AFBB77F4182E1E7D28B920EB3E5B800F45FE427AFDA51591F0B61D662FCE11E348F6D47441E64B63D2E4CFD23B4A2A6FF566A7FF34B67E57946FAC5E13BC6067AFBC3B1219527692C877484EAE2BBF38828EB6D885C29AFADCFCAB5BC5F83EFE4C74C36F8028A6A7C2C4CA9BFC4F9908927BF0935F35154124D7C32496C8D8472F813656183ED5FC777CD2DED3A5A22DBE514C5D74DADBB8B855E39CF15A844639D172EC97DC272D7C9458863A90ECDE287ED9E5821EB66ABE65E8D7001C80E12D919E8C9D27DE8CC66EDC06E7F743E945DF7168B4C300BDD21429B3A1ACFBCB0271B29E9554345DB5F9606E3B2A7EDAA98631BEC12C2D94B0802E2892EE0067E12CA21E21B04593196D8478D5C54C46E16CE804C1D0518425652BD256E81BCC40716111DF9968E8BB37E8D269E697771278A982711FDAA71F0810BDB52213140834F1469A860ED23B98C83C6F76D7E346B57BDBDD3F85A98953DEB4379773F1A3630D61A898AB9A7EC2C36189DD6338AA3406EC5F809A820988AF3326489EE3AB9061040D6CED20CBF484F7F4A850F296898CF5F543C22A6512D449B945D6B70925CBB0D98BFB03ABA892B2981E01D9C0B9DC8F8340E1ED780C8517543AD6EDBAA4B6DB03CD5FBC6AC2A678BD5562563618459BD255811E0AAC3F71E0E84B824C99266A327B6D684489FE9C393FEF1BBBAD5299FBB09284A8FDA29EA27C25D888A6CC5ADD1F4C2C0AC82A3422CA0D04B237273AC30E0EFAB1BD396BF1827CFF773B3FD2F4E39F22D8AC42EAE12FD93F690C3598F849246DF7950E8AAA43159DBCA00EE33C5880D3B50561D297A949007FF2759222A8B22ADEC525DA91A45E9EDBB13D0CE50454CB23CD4839568B23C8B77AE06B30D284713D87FD071A2C6461E5DC29CE46C5C4F249F8CA65C00EBED04345D1B65A86709F2BA0EBB280FC06F8C9C8254A42D3F60AB3FA8127952FBBF4EBDB79A675D1865FF72D00A2AD3C1B5D9960FA0F9FD7CCB334BFB19D8C0A643F38B149F18099CA020C80E511A14BB0AF9CD6748235FAD92B88DCF39E694E9A3D28CCF7D8F7AC3DF7BA16FBF75D3FC8A1E7B94EC401A6CDB00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /gid5475 putdup 34 /gid5266 putdup 35 /gid1380 putdup 36 /gid4696 putdup 37 /gid3664 putdup 38 /gid1747 putdup 39 /gid2191 putdup 40 /gid44 putdup 41 /gid49 putdup 42 /gid57 putdup 43 /gid55 putdup 44 /gid40 putdup 45 /gid53 putdup 46 /gid60 putdup 47 /gid42 putdup 48 /gid3 putdup 49 /gid20 putdup 50 /gid19 putdup 51 /gid27 putdup 52 /gid50 putdup 53 /gid46 putdup 54 /gid21 putdup 55 /gid36 putdup 56 /gid38 putdup 57 /gid51 putdup 58 /gid18 putdup 59 /gid37 putreadonly def/$SubFontArray [/AAAAAC+PingFangHK-Regular findfont ] def/CharProcs 29 dictdup /gid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /gid3 {(\001) 0 $SP} putdup /gid18 {(\002) 0 $SP} putdup /gid19 {(\003) 0 $SP} putdup /gid20 {(\004) 0 $SP} putdup /gid21 {(\005) 0 $SP} putdup /gid27 {(\006) 0 $SP} putdup /gid36 {(\007) 0 $SP} putdup /gid37 {(\010) 0 $SP} putdup /gid38 {(\011) 0 $SP} putdup /gid40 {(\012) 0 $SP} putdup /gid42 {(\013) 0 $SP} putdup /gid44 {(\014) 0 $SP} putdup /gid46 {(\015) 0 $SP} putdup /gid49 {(\016) 0 $SP} putdup /gid50 {(\017) 0 $SP} putdup /gid51 {(\020) 0 $SP} putdup /gid53 {(\021) 0 $SP} putdup /gid55 {(\022) 0 $SP} putdup /gid57 {(\023) 0 $SP} putdup /gid60 {(\024) 0 $SP} putdup /gid1380 {(\025) 0 $SP} putdup /gid1747 {(\026) 0 $SP} putdup /gid2191 {(\027) 0 $SP} putdup /gid3664 {(\030) 0 $SP} putdup /gid4696 {(\031) 0 $SP} putdup /gid5266 {(\032) 0 $SP} putdup /gid5475 {(\033) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/PingFangSC-Regular cguidfix
/F1.1/PingFangSC-Regular renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 433 313 rc
0 313 m
433 313 l
433 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-879 865 m
1194 865 l
1194 -1069 l
-879 -1069 l
h
-879 865 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -188 35 cm
203.5 -249 m
203.5 30 l
S
434.5 -249 m
434.5 30 l
S
319 -249 m
320 -132 l
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 16 300 cm
/F1.1[ 11 0 0 -11 0 0]sf
-11 4 m
(!")[ 11.000000 0.000000 ] xS
1 0 0 -1 247 300 cm
-11 4 m
(!")[ 11.000000 0.000000 ] xS
1 0 0 -1 131.5 300 cm
-27.5 4 m
(#$%&')[ 11.000000 11.000000 11.000000 11.000000 0.000000 ] xS
1 0 0 -1 73.75 277.5 cm
/F1.1[ 9 0 0 -9 0 0]sf
-13.896 3.5 m
(\(\)*\(+,)[ 2.133000 6.471000 5.751000 2.133000 5.571000 0.000000 ] xS
1 0 0 -1 188.75 266.5 cm
-13.896 3.5 m
(\(\)*\(+,)[ 2.133000 6.471000 5.751000 2.133000 5.571000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
310.10001 -236.5 m
204.5 -236.5 l
S
0 J
0 j
0 i
318.10001 -236.5 m
310.10001 -236.5 l
310.10001 -239.5 m
318.10001 -236.5 l
310.10001 -233.5 l
S
1 J
1 j
0.60000002 i
424.60001 -225.5 m
319 -225.5 l
S
0 J
0 j
0 i
432.60001 -225.5 m
424.60001 -225.5 l
424.60001 -228.5 m
432.60001 -225.5 l
424.60001 -222.5 l
S
1 J
1 j
0.60000002 i
213.39999 -208 m
319 -208 l
S
0 J
0 j
0 i
205.39999 -208 m
213.39999 -208 l
213.39999 -205 m
205.39999 -208 l
213.39999 -211 l
S
/Cs1 SC
0 sc
1 0 0 -1 74.25 248.5 cm
-25.1775 3.5 m
(+-.\(\)/0122)[ 5.571000 6.084000 5.958000 2.133000 6.471000 6.732000 2.997000 3.609000 5.400000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
328.89999 -190.5 m
434.5 -190.5 l
S
0 J
0 j
0 i
320.89999 -190.5 m
328.89999 -190.5 l
328.89999 -187.5 m
320.89999 -190.5 l
328.89999 -193.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 189.25 231 cm
-27.080999 3.5 m
(-\(\)/\(\)/0132)[ 6.084000 2.133000 6.471000 6.732000 2.133000 6.471000 6.732000 2.997000 3.609000 5.400000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
213.39999 -167 m
319 -167 l
S
0 J
0 j
0 i
205.39999 -167 m
213.39999 -167 l
213.39999 -164 m
205.39999 -167 l
213.39999 -170 l
S
/Cs1 SC
0 sc
1 0 0 -1 73.75 207.5 cm
-27.080999 3.5 m
(-\(\)/\(\)/0132)[ 6.084000 2.133000 6.471000 6.732000 2.133000 6.471000 6.732000 2.997000 3.609000 5.400000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
328.89999 -155.5 m
434.5 -155.5 l
S
0 J
0 j
0 i
320.89999 -155.5 m
328.89999 -155.5 l
328.89999 -152.5 m
320.89999 -155.5 l
328.89999 -158.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 190.75 195.5 cm
-16.155001 3.5 m
(450622)[ 6.903000 6.210000 2.997000 5.400000 5.400000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
213.39999 -132 m
319 -132 l
S
0 J
0 j
0 i
205.39999 -132 m
213.39999 -132 l
213.39999 -129 m
205.39999 -132 l
213.39999 -135 l
S
/Cs1 SC
0 sc
1 0 0 -1 75.25 172 cm
-16.155001 3.5 m
(450622)[ 6.903000 6.210000 2.997000 5.400000 5.400000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
425.60001 -102.5 m
204.5 -102.5 l
S
0 J
0 j
0 i
433.60001 -102.5 m
425.60001 -102.5 l
425.60001 -105.5 m
433.60001 -102.5 l
425.60001 -99.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 131.5 144 cm
-9.3374996 3.5 m
(785)[ 5.913000 6.552000 0.000000 ] xS
1 J
1 j
[
1
4
] 0 d
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
425.10001 -86 m
204 -86 l
S
0 J
0 j
[] 0 d
0 i
433.10001 -86 m
425.10001 -86 l
425.10001 -89 m
433.10001 -86 l
425.10001 -83 l
S
1 J
1 j
[
1
4
] 0 d
0.60000002 i
213.39999 -28.5 m
434.5 -28.5 l
S
0 J
0 j
[] 0 d
0 i
205.39999 -28.5 m
213.39999 -28.5 l
213.39999 -25.5 m
205.39999 -28.5 l
213.39999 -31.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 131 91.75 cm
-22.959 3.5 m
(-+9:-+89)[ 6.084000 5.571000 5.778000 4.500000 6.084000 5.571000 6.552000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
424.60001 -5 m
203.5 -5 l
S
0 J
0 j
0 i
432.60001 -5 m
424.60001 -5 l
424.60001 -8 m
432.60001 -5 l
424.60001 -2 l
S
/Cs1 SC
0 sc
1 0 0 -1 131 45.5 cm
-8.8920002 3.5 m
(;.,)[ 6.093000 5.958000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
213.89999 18.5 m
435 18.5 l
S
0 J
0 j
0 i
205.89999 18.5 m
213.89999 18.5 l
213.89999 21.5 m
205.89999 18.5 l
213.89999 15.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 131 23 cm
-16.155001 3.5 m
(450622)[ 6.903000 6.210000 2.997000 5.400000 5.400000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
489.75 -249 m
489.75 30 l
S
606.75 -248.5 m
606.75 30.5 l
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 302.25 300 cm
/F1.1[ 11 0 0 -11 0 0]sf
-11 4 m
(!")[ 11.000000 0.000000 ] xS
1 0 0 -1 415.25 300 cm
-11 4 m
(!")[ 11.000000 0.000000 ] xS
1 0 0 -1 360 277.5 cm
/F1.1[ 9 0 0 -9 0 0]sf
-13.896 3.5 m
(\(\)*\(+,)[ 2.133000 6.471000 5.751000 2.133000 5.571000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
596.34998 -236.5 m
490.75 -236.5 l
S
0 J
0 j
0 i
604.34998 -236.5 m
596.34998 -236.5 l
596.34998 -239.5 m
604.34998 -236.5 l
596.34998 -233.5 l
S
1 J
1 j
0.60000002 i
499.64999 -209.5 m
605.25 -209.5 l
S
0 J
0 j
0 i
491.64999 -209.5 m
499.64999 -209.5 l
499.64999 -206.5 m
491.64999 -209.5 l
499.64999 -212.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 361.5 250 cm
-25.1775 3.5 m
(+-.\(\)/0122)[ 5.571000 6.084000 5.958000 2.133000 6.471000 6.732000 2.997000 3.609000 5.400000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
499.64999 -168 m
605.25 -168 l
S
0 J
0 j
0 i
491.64999 -168 m
499.64999 -168 l
499.64999 -165 m
491.64999 -168 l
499.64999 -171 l
S
/Cs1 SC
0 sc
1 0 0 -1 360.5 210 cm
-27.080999 3.5 m
(-\(\)/\(\)/0132)[ 6.084000 2.133000 6.471000 6.732000 2.133000 6.471000 6.732000 2.997000 3.609000 5.400000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
499.64999 -132 m
605.25 -132 l
S
0 J
0 j
0 i
491.64999 -132 m
499.64999 -132 l
499.64999 -129 m
491.64999 -132 l
499.64999 -135 l
S
/Cs1 SC
0 sc
1 0 0 -1 361.5 172 cm
-16.155001 3.5 m
(450622)[ 6.903000 6.210000 2.997000 5.400000 5.400000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
596.84998 -102.5 m
490.75 -102.5 l
S
0 J
0 j
0 i
604.84998 -102.5 m
596.84998 -102.5 l
596.84998 -105.5 m
604.84998 -102.5 l
596.84998 -99.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 360.75 144.5 cm
-9.3374996 3.5 m
(785)[ 5.913000 6.552000 0.000000 ] xS
1 J
1 j
[
1
4
] 0 d
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
596.8501 -86.457512 m
490.25 -86 l
S
0 J
0 j
[] 0 d
0 i
604.85004 -86.491844 m
596.8501 -86.457512 l
596.83722 -89.457481 m
604.85004 -86.491844 l
596.86298 -83.457542 l
S
1 J
1 j
[
1
4
] 0 d
0.60000002 i
499.64999 -28.5 m
605.25 -28.5 l
S
0 J
0 j
[] 0 d
0 i
491.64999 -28.5 m
499.64999 -28.5 l
499.64999 -25.5 m
491.64999 -28.5 l
499.64999 -31.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 360.75 91.75 cm
-22.959 3.5 m
(-+9:-+89)[ 6.084000 5.571000 5.778000 4.500000 6.084000 5.571000 6.552000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
595.34998 -5 m
489.75 -5 l
S
0 J
0 j
0 i
603.34998 -5 m
595.34998 -5 l
595.34998 -8 m
603.34998 -5 l
595.34998 -2 l
S
/Cs1 SC
0 sc
1 0 0 -1 359.5 48.125 cm
-8.8920002 3.5 m
(;.,)[ 6.093000 5.958000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -188 35 cm
500.14999 18.5 m
605.75 18.5 l
S
0 J
0 j
0 i
492.14999 18.5 m
500.14999 18.5 l
500.14999 21.5 m
492.14999 18.5 l
500.14999 15.5 l
S
/Cs1 SC
0 sc
1 0 0 -1 359.5 23 cm
-16.155001 3.5 m
(450622)[ 6.903000 6.210000 2.997000 5.400000 5.400000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
